/*
* Copyright 2019 Google LLC
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*     https://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

const clamd = require('clamdjs');
const express = require('express');
const fs = require('fs');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 8080;
const scanner = clamd.createScanner('127.0.0.1', 3310);

const fileUpload = require('express-fileupload');


app.use(bodyParser.json());
app.use(fileUpload({
  limits: { fileSize: 5 * 1024 * 1024 },
  useTempFiles : true,
  abortOnLimit: true
}));

const run = () => app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
})

/**
 * Route that is invoked when a malware scan is requested
 *
 * @param {object} req The request payload
 * @param {object} res The HTTP response object
 */
app.post('/scan', async (req, res) => {
  console.log('Request body', req.body);

  let file = req.files.file;
  const fileName = file.name;
  let tempFileName = file.tempFilePath.split('/');
  tempFileName = tempFileName[tempFileName.length-1];

  try {

    console.log(`Filename is: ${fileName}`);

    const result = await scanner.scanFile(`tmp/${tempFileName}`);

    if (result.indexOf('OK') > -1) {

      // Log scan outcome for document
      console.log(`Scan status for ${fileName}: CLEAN`)

      // Respond to API client
      res.json({status: 'clean'});
    } else {

      // Log scan outcome for document
      console.log(`Scan status for ${fileName}: INFECTED`)

      // Respond to API client
      res.json({
        message: result,
        status: 'infected'
      });
    }
  } catch(e) {
    console.error(`Error processing the file ${fileName}`, e)
    res.status(500).json({
      message: e.toString(),
      status: 'error'
    });
  } finally {
    // Delete file from the local directory on the container
    deleteLocalCopy(`tmp/${tempFileName}`, fileName);
  }
})


const deleteLocalCopy = (loc, fileName) => {
  fs.unlink(loc, (err) => {
    if (err) {
      console.error(`Error deleting file ${fileName}`);
    } else {
      console.log(`File ${fileName} was deleted successfully`);
    }
  })
}

run();